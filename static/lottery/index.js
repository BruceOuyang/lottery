class GameBlock {
    constructor(x, y, vx, vy, bg, data) {
        this.color = ["#0052cc", "#cb22e5", "#8ee524", "#7de89d", "#fcd58d", "#db85d5", "#e2a878", "#239bba", "#e542f7"];
        this.x = x;
        this.y = y;
        this.vx = vx;
        this.vy = vy;
        this.bg = this.getRandomColor();
        this.data = data;
        this.id = data.id;
        this.g = (Math.random() * 5 + 0.1) / 100;
    }
    getRandomColor() {
        return this.color[Math.floor(Math.random() * this.color.length)];
    }
}
class EndAnimation {
    constructor(canvas, fixedBlockMap, setting) {
        this.hasStopBlock = [];
        this.itemWidth = setting.width;
        this.itemHeight = setting.height;
        this.fixedBlock = fixedBlockMap;
        this.canvas = canvas;
        this.calculateFixedBlockRunParms();
        this.run();
    }
    calculateFixedBlockRunParms() {
        const fps = 50;
        const runTime = 1;
        let columnCount = 10;
        let marginX = 10;
        let marginY = 10;
        let totalSize = this.fixedBlock.size;
        let addRow = totalSize % columnCount == 0 ? 0 : 1;
        let rowCount = Math.floor(totalSize / columnCount) + addRow;
        let startX = (this.canvas.width - (this.itemWidth + marginX) * columnCount) / 2;
        let startY = (this.canvas.height - (this.itemHeight + marginY) * rowCount) / 2;
        let i = 0;
        const keys = this.fixedBlock.keys();
        for (let key of keys) {
            let item = this.fixedBlock.get(key);
            let currentRowIndex = Math.floor(i / columnCount);
            console.log(currentRowIndex);
            item.targetX = startX + i * (this.itemWidth + marginX);
            item.targetY = startY + currentRowIndex * (this.itemWidth + marginX);
            item.vx = (item.targetX - item.x) / (fps * runTime);
            item.vy = (item.targetY - item.y) / (fps * runTime);
            console.log(item);
            i++;
        }
    }
    draw() {
        const ctx = this.canvas.getContext("2d");
        const keys = this.fixedBlock.keys();
        for (let key of keys) {
            let item = this.fixedBlock.get(key);
            if (!item) {
                continue;
            }
            item.y += item.vy;
            item.x += item.vx;
            if (item.vx > 0) {
                if (item.x >= item.targetX) {
                    item.x = item.targetX;
                    item.vx = 0;
                }
            }
            else if (item.vx < 0) {
                if (item.x <= item.targetX) {
                    item.x = item.targetX;
                    item.vx = 0;
                }
            }
            if (item.vy > 0) {
                if (item.y >= item.targetY) {
                    item.y = item.targetY;
                    item.vy = 0;
                }
            }
            else if (item.vy < 0) {
                if (item.y <= item.targetY) {
                    item.y = item.targetY;
                    item.vy = 0;
                }
            }
            if (item.vy == 0 && item.vx == 0) {
                this.fixedBlock.delete(key);
                this.hasStopBlock.push(item);
            }
            ctx.fillStyle = item.bg;
            ctx.beginPath();
            ctx.arc(item.x + this.itemWidth / 2, item.y + this.itemHeight / 2, this.itemWidth / 2, 0, 2 * Math.PI);
            ctx.closePath();
            ctx.fill();
        }
        this.hasStopBlock.forEach((item) => {
            ctx.fillStyle = item.bg;
            ctx.beginPath();
            ctx.arc(item.x + this.itemWidth / 2, item.y + this.itemHeight / 2, this.itemWidth / 2, 0, 2 * Math.PI);
            ctx.closePath();
            ctx.fill();
        });
    }
    run() {
        const ctx = this.canvas.getContext("2d");
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.draw();
        requestAnimationFrame(() => {
            if (this.fixedBlock.size == 0) {
                return;
            }
            this.run();
        });
    }
}
class GameScreen {
    constructor(canvas, userList, setting) {
        this.stopped = false;
        this.itemWidth = 40;
        this.itemHeight = 40;
        this.countOfItemInRunningAtAnyTime = 30;
        this.newCountPeerSecond = 15;
        this.runningStore = new Map();
        this.preparePool = [];
        this.pickCountList = [];
        this.fixedBlock = new Map();
        this.canvas = canvas;
        this.countOfItemInRunningAtAnyTime = setting.countOfItemInRunningAtAnyTime;
        this.newCountPeerSecond = setting.newCountPeerSecond;
        this.pickCountList = setting.pickCountList;
        this.initUserPool(userList);
    }
    shuffle(list) {
        var m = list.length;
        var t, i;
        while (m) {
            i = Math.floor(Math.random() * m--);
            t = list[m];
            list[m] = list[i];
            list[i] = t;
        }
        return list;
    }
    initUserPool(userList) {
        userList = this.shuffle(userList);
        const initVy = Math.floor(Math.random() * 10);
        for (let i = 0; i < userList.length; i++) {
            let x = Math.floor((this.canvas.width - this.itemWidth) * Math.random());
            this.preparePool.push(new GameBlock(x, 0 - this.itemHeight, 0, initVy, "", userList[i]));
        }
    }
    pickInitRunItems() {
        if (this.countOfItemInRunningAtAnyTime < this.preparePool.length) {
            let i = 0;
            while (i < this.countOfItemInRunningAtAnyTime) {
                let item = this.preparePool.shift();
                this.runningStore.set(item.id, item);
                i++;
            }
        }
        else {
            this.preparePool.forEach((item) => {
                this.runningStore.set(item.id, item);
            });
            this.preparePool = [];
        }
    }
    start() {
        this.pickInitRunItems();
        this.addNewItemAtTime = Date.now();
        this.animation(Date.now());
    }
    stop() {
        this.stopped = true;
        let listOnScreen = [];
        for (let key of this.runningStore.keys()) {
            let item = this.runningStore.get(key);
            if (item.x > 0 && item.y > 0 && item.y < this.canvas.height) {
                listOnScreen.push(item);
            }
        }
        listOnScreen = this.shuffle(listOnScreen);
        const luckyUserList = [];
        let start = 0;
        for (let i = 0; i < this.pickCountList.length; i++) {
            let list = listOnScreen.slice(start, start + this.pickCountList[i]);
            let q = [];
            list.forEach((item) => {
                this.fixedBlock.set(item.id, item);
                this.runningStore.delete(item.id);
                q.push(item.data);
            });
            luckyUserList.push(q);
            start = this.pickCountList[i];
        }
        return luckyUserList;
    }
    drawFixedItem() {
        const ctx = this.canvas.getContext("2d");
        const keys = this.fixedBlock.keys();
        for (let key of keys) {
            let item = this.fixedBlock.get(key);
            ctx.fillStyle = item.bg;
            ctx.beginPath();
            ctx.arc(item.x + this.itemWidth / 2, item.y + this.itemHeight / 2, this.itemWidth / 2, 0, 2 * Math.PI);
            ctx.closePath();
            ctx.fill();
        }
    }
    computeEveryItemPositionAndDrawIt(runTimeInterval) {
        const ctx = this.canvas.getContext("2d");
        const keys = this.runningStore.keys();
        for (let key of keys) {
            let item = this.runningStore.get(key);
            if (!item) {
                continue;
            }
            if (item.x > this.canvas.width || item.x < 0 - this.itemWidth || item.y > this.canvas.height) {
                this.runningStore.delete(key);
                item.x = Math.floor((this.canvas.width - this.itemWidth) * Math.random());
                item.y = 0 - this.itemHeight;
                item.vy = Math.floor(Math.random() * 3);
                this.preparePool.push(item);
                continue;
            }
            ctx.fillStyle = item.bg;
            ctx.beginPath();
            ctx.arc(item.x + this.itemWidth / 2, item.y + this.itemHeight / 2, this.itemWidth / 2, 0, 2 * Math.PI);
            ctx.closePath();
            ctx.fill();
            item.y += item.vy;
            item.x += item.vx;
            item.vy += item.g * runTimeInterval;
        }
        if (this.stopped) {
            this.drawFixedItem();
            return;
        }
        if (Date.now() - this.addNewItemAtTime < 200 + Math.random() * 800) {
            return;
        }
        this.preparePool = this.shuffle(this.preparePool);
        this.addNewItemAtTime = Date.now();
        let needAddNewItem = this.newCountPeerSecond;
        if (needAddNewItem >= this.preparePool.length) {
            this.preparePool.forEach((item) => {
                this.runningStore.set(item.id, item);
            });
            this.preparePool = [];
            return;
        }
        while (needAddNewItem > 0) {
            let item = this.preparePool.shift();
            this.runningStore.set(item.id, item);
            needAddNewItem--;
        }
    }
    animation(lastTime) {
        const ctx = this.canvas.getContext("2d");
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        const now = Date.now();
        const runTimeInterval = now - lastTime;
        this.computeEveryItemPositionAndDrawIt(runTimeInterval);
        requestAnimationFrame(() => {
            if (this.runningStore.size == 0) {
                new EndAnimation(this.canvas, this.fixedBlock, { width: this.itemWidth, height: this.itemHeight });
                return;
            }
            this.animation(now);
        });
    }
}
async function prepareSetting(id) {
    return fetch("/api/setting/prepare/" + id).then((response) => {
        if (response.status == 200) {
            return response.json();
        }
        throw new Error(response.statusText);
    }).then((data) => {
        if (data.code == 0) {
            return data.data;
        }
        throw new Error(`code:${data.code}, msg:${data.msg}`);
    });
}
var game;
async function main() {
    const urlParams = new URLSearchParams(location.search.substring(1));
    const id = urlParams.get("id");
    if (!id) {
        alert("没有该抽奖规则!!");
        return;
    }
    let setting = await prepareSetting(id);
    console.log(setting);
    const screenDom = document.getElementById('screen');
    game = new GameScreen(screenDom, setting.userList, {
        countOfItemInRunningAtAnyTime: 30,
        newCountPeerSecond: 15,
        pickCountList: [10]
    });
    game.start();
}
function stopGame() {
    if (game) {
        let list = game.stop();
        console.log(list);
    }
}
main();
//# sourceMappingURL=data:application/json;base64,